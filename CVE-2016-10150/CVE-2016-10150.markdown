Оказавшись в системе пол логином "user", открываем терминал.  
Пропиываем комнду просмотра директории 
```
ls
```

Переходим в папку Downloads.  В папке Downloads видим заархивированный файл linux-4.4.14.tar.gz - это папка содержит текущее ядро.
```
cd Downloads/
```
(.tar.gz  – формат архива, выполняющий сжатие данных с помощью утилиты tar (для одного файла) и связки утилит gzip + tar (для нескольких файлов). Отличительная особенность — умение работать с непрерывным потоком данных. Поэтому GZ считается оптимальным инструментом для сжатия интернет-трафика.)


Для начала распакуем архив.
```
tar -xvf linux-4.4.14.tar.gz
```
Повторим команду просмотра директории. Теперь рядом с папкой linux-4.4.14.tar.gz оказалась папка linux-4.4.14. Это заархивированное ядро, с которым мы продолжим работу. 
```
ls
```
Заходим в папку linux-4.4.14 и наблюдаем там систему папок и файлов, которые и формирует ядро. 
```
ls linux-4.4.14/
```
---
 
Текущее описание:
Уязвимость использования после освобождения в функции kvm_ioctl_create_device в virt/kvm/kvm_main.c в ядре Linux до версии 4.8.13 позволяет пользователям хост-ОС вызывать отказ в обслуживании (сбой хост-ОС) или, возможно, получать привилегии с помощью созданных вызовов ioctl на устройство /dev/kvm.  

**Базовая оценка: 9.8 КРИТИЧЕСКИЙ**

---
Чтобы исправить CVE-2016-10150 переходим в папку   kvm  
```
cd virt/kvm/
```
kvm - KVM или Kernel Virtual Module - это модуль виртуализации для ядра Linux, который позволяет превратить ваш компьютер в гипервизор для управления виртуальными машинами. Этот модуль работает на уровне ядра и поддерживает такие технологии аппаратного ускорения, как Intel VT и AMD SVM.  

В папке kvm  нас интересует системный файл kvm_main.c. Этот файл написан на языке си, для его редактирования воспользуемся текстовым редактором nano. 
```
nano kvm_main.c
```
Перед нами открывается исходный код ядра. 


```
“ctrl+_”
```
Затем вводим номер проблемной строки 2705.

Теперь переместим ops->destroy(dev) после list_del(&dev->vm_node), 
чтобы не было использования «dev» после его освобождения. 

Таким образом цикл if (ret < 0 ) должен выглядеть следующим образом:
```
if (ret < 0) {
mutex_lock(&kvm->lock);		
list_del(&dev->vm_node);		
mutex_unlock(&kvm->lock);		
ops->destroy(dev); 		
return ret;
 }
 ```
 
Добавляем нужные строчки, а после сохраняем файл комбинацией 
```
“ctrl+x”
``` 
Далее выбираем ```“Y”``` и жмем ```“enter”```.


**Исправления: ("KVM: Защитить устройства ops->create и list_add с помощью kvm->lock")**

















